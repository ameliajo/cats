#include "catch.hpp"
#include "../rconv.h"
#include "../../generalTools/testing.h"


TEST_CASE( "rconv" ){
  std::vector<double> S1 {     
    5.6177052E-2, 5.4031218E-2, 5.2011518E-2, 5.0062962E-2, 4.8183227E-2,
    4.6370057E-2, 4.4621263E-2, 4.2934719E-2, 4.1308365E-2, 3.9740202E-2,
    3.8228288E-2, 3.6770744E-2, 3.5365746E-2, 3.4011525E-2, 3.2706368E-2,
    3.1448612E-2, 3.0236647E-2, 2.9068915E-2, 2.7943902E-2, 2.6860145E-2,
    2.5816226E-2, 2.4810772E-2, 2.3842451E-2, 2.2909978E-2, 2.2012104E-2,
    2.1147625E-2, 2.0315371E-2, 1.9514213E-2, 1.8743058E-2, 1.8000848E-2,
    1.7286559E-2, 1.6599202E-2, 1.5937819E-2, 1.5301486E-2, 1.4689306E-2,
    1.4100415E-2, 1.3533976E-2, 1.2989182E-2, 1.2465249E-2, 1.1961425E-2,
    1.1476978E-2, 1.1011204E-2, 1.0563423E-2, 1.0132977E-2, 9.7192302E-3,
    9.3215696E-3, 8.9394028E-3, 8.5721580E-3, 8.2192832E-3, 7.8802454E-3,
    7.5545303E-3, 7.2416414E-3, 6.9410998E-3, 6.6524431E-3, 6.3752255E-3,
    6.1090167E-3, 5.8534017E-3, 5.6079803E-3, 5.3723664E-3, 5.1461879E-3,
    4.9290856E-3, 4.7207137E-3, 4.5207385E-3, 4.3288385E-3, 4.1447035E-3,
    3.9680350E-3, 3.7985451E-3, 3.6359564E-3, 3.4800016E-3, 3.3304234E-3,
    3.1869735E-3, 3.0494133E-3, 2.9175125E-3, 2.7910497E-3, 2.6698114E-3,
    2.5535923E-3, 2.4421945E-3, 2.3354277E-3, 2.2331086E-3, 2.1350608E-3,
    2.0411145E-3, 1.9511064E-3, 1.8648792E-3, 1.7822818E-3, 1.7031687E-3,
    1.6273998E-3, 1.5548406E-3, 1.4853615E-3, 1.4188381E-3, 1.3551506E-3,
    1.2941838E-3, 1.2358271E-3, 1.1799741E-3, 1.1265224E-3, 1.0753738E-3,
    1.0264337E-3, 9.7961134E-4, 9.3481945E-4, 8.9197419E-4, 8.5099501E-4},
  X5 { 0.205, 0.48 },
  ANK { 
    4.4045397E-1, 4.9666439E-1, 1.1007910E-2, 1.2412731E-2, 1.3758455E-4,
    1.5514298E-4, 1.1464782E-6, 1.2927909E-6, 7.1652648E-9, 8.0796906E-9,
    3.5825578E-11, 4.0397612E-11, 1.4927102E-13, 1.6832088E-13, 5.3310486E-16,
    6.0113931E-16, 1.6659382E-18, 1.8785441E-18, 4.6275742E-21, 5.2181418E-21},
  betas { 0.000, 0.080, 0.160, 0.240, 0.320,
    0.400, 0.480, 0.560, 0.640, 0.720,
    0.800, 0.880, 0.960, 1.040, 1.120,
    1.200, 1.280, 1.360, 1.440, 1.520,
    1.600, 1.680, 1.760, 1.840, 1.920,
    2.000, 2.080, 2.160, 2.240, 2.320,
    2.400, 2.480, 2.560, 2.640, 2.720,
    2.800, 2.880, 2.960, 3.040, 3.120,
    3.200, 3.280, 3.360, 3.440, 3.520,
    3.600, 3.680, 3.760, 3.840, 3.920,
    4.000, 4.080, 4.160, 4.240, 4.320,
    4.400, 4.480, 4.560, 4.640, 4.720,
    4.800, 4.880, 4.960, 5.040, 5.120,
    5.200, 5.280, 5.360, 5.440, 5.520,
    5.600, 5.680, 5.760, 5.840, 5.920,
    6.000, 6.080, 6.160, 6.240, 6.320,
    6.400, 6.480, 6.560, 6.640, 6.720,
    6.800, 6.880, 6.960, 7.040, 7.120,
    7.200, 7.280, 7.360, 7.440, 7.520,
    7.600, 7.680, 7.760, 7.840, 7.920};
  double T = 0.0255;
  std::vector<int> nMax { 0, 0 };

  rconv( nMax, X5, ANK, T, S1, betas );


  //double xVal;
  //std::vector<double> B (10,0.0), correctB (10);
  //int nMax;

  GIVEN( "a small x value (xVal < 0.05)" ){
    WHEN( "results of one is fed into the next (round 1)" ){
      //REQUIRE( ranges::equal(B,correctB,equal) );

    } // WHEN
  } // GIVEN
} // TEST_CASE
      //std::cout << (B|ranges::view::all) << std::endl;
