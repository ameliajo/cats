#include "catch.hpp"
#include "../sterp.h"
#include "../../../../generalTools/testing.h"


TEST_CASE( "sterp" ){
  GIVEN( "" ){
    std::vector<double> betas (100);
    for ( size_t i = 0; i < betas.size(); ++i ){ betas[i] = i*0.08; }

    double betaVal = 0.0;
    std::vector<double> 
    nonZeroSLOGVals { -2.87924, -2.91819, -2.95629, -2.99447, -3.03274, -3.07110, 
      -3.10954, -3.14807, -3.18669, -3.22539, -3.26417, -3.30305, -3.34201, 
      -3.38105, -3.42018, -3.45940, -3.49870, -3.53808, -3.57755, -3.61711, 
      -3.65675, -3.69647, -3.73628, -3.77618, -3.81616, -3.85622, -3.89637, 
      -3.93661, -3.97693, -4.01733, -4.05782, -4.09840, -4.13906, -4.17980, 
      -4.22063, -4.26155, -4.30255, -4.34363, -4.38481, -4.42606, -4.46741, 
      -4.50884, -4.55035, -4.59196, -4.63364, -4.67542, -4.71728, -4.75923, 
      -4.80127, -4.84339, -4.88560, -4.92790, -4.97029, -5.01277, -5.05533, 
      -5.09798, -5.14073, -5.18356, -5.22648, -5.26949, -5.31260, -5.35579, 
      -5.39907, -5.44245, -5.48592, -5.52948, -5.57313, -5.61688, -5.66072, 
      -5.70465, -5.74868, -5.79280, -5.83702, -5.88133, -5.92574, -5.97025, 
      -6.01485, -6.05956, -6.10436, -6.14926, -6.19425, -6.23935, -6.28455, 
      -6.32986, -6.37526, -6.42077, -6.46638, -6.51209, -6.55791, -6.60384, 
      -6.64987, -6.69601, -6.74226, -6.78861, -6.83508, -6.88166, -6.92835, 
      -6.97515, -7.02207, -7.06910};
    std::vector<double> sLog (1000,0.0);
    for (size_t i = 0; i < nonZeroSLOGVals.size(); ++i){
        sLog[i] = nonZeroSLOGVals[i];
    }
    
    REQUIRE( 5.61770521E-2 == Approx(sterp(0.00, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 5.40312183E-2 == Approx(sterp(0.08, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 5.20115180E-2 == Approx(sterp(0.16, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 5.17638601E-2 == Approx(sterp(0.17, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 8.51495284E-4 == Approx(sterp(7.919, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 0.0 == Approx(sterp(7.920, betas, sLog)).epsilon(1e-6) );
    REQUIRE( 5.61770521E-2 == Approx(sterp(-0.01, betas, sLog)).epsilon(1e-6) );

  } // GIVEN
} // TEST_CASE
      //std::cout << (B|ranges::view::all) << std::endl;
