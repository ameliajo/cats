#include "catch.hpp"
#include "generalTools/gaussLaguerre.h"

TEST_CASE( "Gauss Laguerre" ){
  GIVEN( "" ){
    int N = 10;
    std::vector<double> truePoints(N), trueWeights(N);
    THEN( "" ){
      auto tupleOutput = gaussLaguerre(N,0.0,1.0);
      truePoints = {0.13779347, 0.72945455, 1.8083429, 3.4014337, 5.55249614, 
        8.33015275, 11.84378584, 16.27925783, 21.99658581, 29.92069701 };
      trueWeights = {3.08441116e-1, 4.01119929e-1, 2.18068288e-1, 6.20874561e-2, 
        9.50151698e-3, 7.53008389e-4, 2.82592335e-5, 4.24931398e-7, 
        1.83956482e-9, 9.91182722e-13 };

      auto points  = std::get<0>(tupleOutput);
      auto weights = std::get<1>(tupleOutput);

      for (int i = 0; i < N; ++i){ 
        REQUIRE( truePoints[i]  == Approx(points[i] ).epsilon(1e-6) );
        REQUIRE( trueWeights[i] == Approx(weights[i]).epsilon(1e-6) );
      }
    } // THEN
  } // GIVEN
  GIVEN( "" ){
    int N = 60;
    std::vector<double> truePoints(N), trueWeights(N);
    THEN( "" ){
      auto tupleOutput = gaussLaguerre(N,0.0,1.0);
      truePoints = {2.38979773e-2, 1.25934719e-1, 3.09578934e-1, 5.74995542e-1, 
      9.22369482e-1, 1.35193836, 1.86399634, 2.45889584, 3.13704901, 3.89892939, 
      4.74507380, 5.67608451, 6.69263166, 7.79545609, 8.98537243, 1.02632727e1, 
      1.16301301e1, 1.30870037e1, 1.46350432e1, 1.62754947e1, 1.80097066e1, 
      1.98391368e1, 2.17653603e1, 2.37900784e1, 2.59151278e1, 2.81424923e1, 
      3.04743151e1, 3.29129126e1, 3.54607911e1, 3.81206644e1, 4.08954750e1, 
      4.37884180e1, 4.68029686e1, 4.99429136e1, 5.32123890e1, 5.66159225e1, 
      6.01584849e1, 6.38455493e1, 6.76831630e1, 7.16780327e1, 7.58376279e1, 
      8.01703063e1, 8.46854692e1, 8.93937535e1, 9.43072741e1, 9.94399325e1, 
      1.04807817e2, 1.10429727e2, 1.16327879e2, 1.22528873e2, 1.29065052e2, 
      1.35976469e2, 1.43313845e2, 1.51143217e2, 1.59553625e2, 1.68670807e2, 
      1.78683925e2, 1.89905247e2, 2.02933988e2, 2.19318116e2};
      trueWeights = {5.98836115e-2, 1.25910967e-1, 1.64730789e-1, 1.72391187e-1, 
      1.54429268e-1, 1.21803513e-1, 8.58079769e-2, 5.44353672e-2, 3.12527898e-2, 
      1.62902590e-2, 7.72474566e-3, 3.33668949e-3, 1.31386586e-3, 4.71788726e-4, 
      1.54500736e-4, 4.61336303e-5, 1.25555416e-5, 3.11265361e-6, 7.02389232e-7, 
      1.44139423e-7, 2.68711554e-8, 4.54532405e-9, 6.96674609e-10, 9.66111905e-11, 
      1.21013729e-11, 1.36665090e-12, 1.38875836e-13, 1.26704409e-14, 
      1.03541839e-15, 7.55907206e-17, 4.91605568e-18, 2.83933160e-19, 
      1.45143796e-20, 6.54273502e-22, 2.59025191e-23, 8.96642784e-25, 
      2.70067801e-26, 7.03988949e-28, 1.57875479e-29, 3.02587769e-31, 
      4.92016736e-33, 6.73166412e-35, 7.67809654e-37, 7.22466942e-39, 
      5.54150040e-41, 3.41766013e-43, 1.66814952e-45, 6.32557327e-48, 
      1.82313964e-50, 3.89065967e-53, 5.95516155e-56, 6.28544923e-59, 
      4.35239524e-62, 1.85335648e-65, 4.44827348e-69, 5.32256631e-73, 
      2.64120678e-77, 4.01650584e-82, 1.05169410e-87, 1.09094195e-94 };

      auto points  = std::get<0>(tupleOutput);
      auto weights = std::get<1>(tupleOutput);

      for (int i = 0; i < N; ++i){ 
        REQUIRE( truePoints[i]  == Approx(points[i] ).epsilon(1e-6) );
        REQUIRE( trueWeights[i] == Approx(weights[i]).epsilon(1e-6) );
      }
    } // THEN
  } // GIVEN

} // TEST CASE
