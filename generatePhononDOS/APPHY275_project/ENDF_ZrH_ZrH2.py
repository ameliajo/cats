import matplotlib.pyplot as plt  
import numpy as np

# These are the partial phonon densities of states corresponding to H in ZrH
# and Zr in ZrH, as released in the ENDF-B/VIII.0 library. 

def get_ENDF_ZrH_dos():
    y__h_in_zrh = [0., .000875, .0035, .008, .015, .0235, .0340, .046, .061, .078, .094, .116, .144, .1606, .1969, .2606, .3479, .3559, .3500, .3322, .3328, .2911, .1617, .1431, .1248, .09738, .06067, .1221, .1495, .07219, .01443, .0001, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .0499, 2.010, 3.560, 4.790, 5.995, 7.250, 8.550, 9.640, 11.91, 13.52, 16.04, 19.79, 26.10, 29.39, 30.82, 32.21, 31.75, 33.14, 35.65, 33.34, 36.27, 38.18, 38.75, 39.48, 28.99, 23.29, 25.18, 26.59, 27.86, 27.89, 29.44, 25.86, 23.33, 24.66, 27.51, 37.94, 60.77, 26.66, 18.54, 14.51, 11.48, 9.53, 7.53, 5.449, 3.838, 8.497, 0.]
    x__h_in_zrh = [ 0.001 * i for i in range(len(y__h_in_zrh)) ]


    y__zr_in_zrh = [0., .08, .32, .70, 1.40, 2.15, 3.10, 4.50, 6.30, 8.40, 11.0, 14.2, 16.4, 21.3, 27.97, 39.79, 57.36, 63.10, 67.14, 69.42, 76.32, 73.70, 43.53, 42.53, 41.67, 37.72, 29.24, 66.07, 94.47, 58.62, 19.57, 1.031, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .00218, .0828, .1340, .1650, .1860, .2050, .2150, .2170, .2360, .2340, .239, .242, .235, .223, .221, .214, .198, .189, .170, .206, .207, .202, .193, .197, .200, .212, .225, .243, .253, .253, .262, .228, .195, .194, .204, .263, .390, .170, .108, .0775, .0592, .0406, .0235, .0112, .00424, .000266, 0.]

    x__zr_in_zrh = [ 0.001 * i for i in range(len(y__zr_in_zrh)) ]
    assert(x__h_in_zrh == x__zr_in_zrh)

    x = x__zr_in_zrh[:]
    x = [1000*xval for xval in x]
    

    total_dos = [max(y__zr_in_zrh[i],y__h_in_zrh[i]) for i in range(len(x))]

    def normalize(x,y):
        invArea = 1.0/np.trapz(y,x)
        return [invArea*val for val in y]
    total_dos = normalize(x,total_dos)


    return x,total_dos


if __name__=="__main__":

    x,total_dos = get_ENDF_ZrH_dos()
    plt.plot(x,total_dos,color='#28334AFF')
    plt.fill(x,total_dos,label='ENDF',color='#28334AFF',alpha=0.3)
    plt.xlabel('Energy (meV)')
    plt.ylabel('Phonon Density of States (normalized)')
    plt.title('ENDF ZrH Phonon Distribution')
    plt.show()

